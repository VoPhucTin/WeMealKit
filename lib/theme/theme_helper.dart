import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // final Reader read;
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors(),
    'dark': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme, // Add light theme
    'dark': ColorSchemes.darkColorScheme, // Add dark theme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.orange700,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.orange700,
      ),
      dividerTheme: DividerThemeData(
        thickness: 11,
        space: 11,
        color: appTheme.gray900,
      ),
      
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray70001,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 41.fSize,
          fontFamily: 'Alumni Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 28.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF032628),
    primaryContainer: Color(0XFF00939D),
    secondaryContainer: Color(0X7F0A2533),

    // Error colors
    errorContainer: Color(0XFF353535),
    onErrorContainer: Color(0XF2FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFFFB400),
    onPrimaryContainer: Color(0XFF130F26),
    onSecondaryContainer: Color(0XFFECB579),
  );

  static final darkColorScheme = ColorScheme.dark(
    // Primary colors
    primary: Color(0XFF032628),
    primaryContainer: Color(0XFF00939D),
    secondaryContainer: Color(0X7F0A2533),

    // Error colors
    errorContainer: Color(0XFF353535),
    onErrorContainer: Color(0XF2FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XF2FFFFFF),
    onPrimaryContainer: Color(0XF2FFFFFF),
    onSecondaryContainer: Color(0XFFECB579),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF030319);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue700 => Color(0XFF1E76D5);
  Color get blue900 => Color.fromARGB(255, 11, 57, 164);

  // BlueGray
  Color get blueGray100 => Color(0XFFC6E3E5);
  Color get blueGray300 => Color(0XFF97A1B0);
  Color get blueGray500 => Color(0XFF748189);
  Color get blueGray700 => Color(0XFF435965);
  Color get blueGray70001 => Color(0XFF48515E);
  Color get blueGray900 => Color(0XFF38303B);
  Color get blueGray90001 => Color(0XFF333333);

  // DeepOrange
  Color get deepOrange400 => Color(0XFFFA7344);
  Color get deepOrangeA100 => Color(0XFFECB579);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray300 => Color(0XFFDDE3EB);
  Color get gray30001 => Color(0XFFDDE4EC);
  Color get gray30038 => Color(0X38DDE4EC);
  Color get gray700 => Color(0XFF606A6B);
  Color get gray900 => Color(0XFF0A2533);

  // Graya
  Color get gray4000a => Color(0X0AAEAEAE);

  // Green
  Color get green400 => Color(0XFF7CA661);

  // Indigo
  Color get indigo100 => Color(0XFFACC5E1);
  Color get indigo10001 => Color(0XFFBECCDE);

  // LightGreen
  Color get lightGreen300 => Color(0XFFAEDB8F);
  Color get lightGreen400 => Color(0XFFB5CD5A);

  // Orange
  Color get orange300 => Color(0XFFEBB64A);
  Color get orange700 => Color(0XFFFF7A00);

  // Purplea
  Color get purple8000a => Color(0X0A752277);

  // Red
  Color get red300 => Color(0XFFC89059);
  Color get red30001 => Color(0XFFD79564);
  Color get red400 => Color(0XFFF06155);
  Color get redA200 => Color(0XFFFF685F);
  Color get redA700 => Color(0XFFBD0000);

  // Teal
  Color get teal400 => Color(0XFF3DA0A6);
  Color get teal90021 => Color(0X21053336);

  // Yellow
  Color get yellow100 => Color(0XFFFFF1CE);
}


PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
